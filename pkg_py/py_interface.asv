function dmd_coeffs = py_interface(images, lps)
    import pkg_DMD.* 
    import pkg_PTM.* 
    import pkg_HSH.* 
    import pkg_fcns.*
    basisname = 'fixed';
    nb_modes=45;
    [modal_basis, normal_elt, Up] = DMD_build_RMB(nb_modes,basisname);
    interp_Qi_all = DMD_getEigenModes(nb_modes,lps, modal_basis, normal_elt, Up);
    images = single(images);
    normalised_images=images/255;
    dmd_coeffs  = LeastSquares(normalised_images, interp_Qi_all); % if weighted add W matrix
    
    
    %%  ------------- Interpolation in a new lighting direction  DMD -------------------------------
    cur_im_dirE(1,1,:)=Images.LP1(3,1,:);   
    cur_im_dirE(1,2,:)=Images.LP1(3,2,:);
    cur_im_dirE(1,3,:)=Images.LP1(3,3,:);  %% or give xyz coordinates
    interp_Qi = DMD_getEigenModes(data.nb_modes, cur_im_dirE, data.modal_basis(:,1:data.nb_modes), data.normal_elt, data.Up);            

    % image in a new direction of lighting
    image_interp_vect_DMD1= interp_Qi *data.coef_DMD;
    image_interp_mat_DMD1=  reshape(image_interp_vect_DMD2,Images.height,Images.width);                
    figure, imshow(image_interp_mat_DMD1), title('DMD image'); % show interpolated image

    map= image_interp_mat_DMD1- image_interp_mat_DMD2;
    figure, imagesc(map);
end
